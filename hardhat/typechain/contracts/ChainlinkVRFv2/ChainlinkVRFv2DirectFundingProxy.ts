/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ChainlinkVRFv2DirectFundingProxyInterface
  extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addNodeBackendAddress(address)": FunctionFragment;
    "callbackGasLimit(bytes32)": FunctionFragment;
    "callbackWithRandomness(uint8[],bytes32[],bytes32[],address,uint256,bytes32,uint256[])": FunctionFragment;
    "callingContracts(bytes32)": FunctionFragment;
    "contractPurpose()": FunctionFragment;
    "fee()": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeNodeBackendAddress(address)": FunctionFragment;
    "requestHandled(bytes32)": FunctionFragment;
    "requestRandomness(uint32,uint16,uint32)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setPurpose(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistedNodeBackendAddresses(address)": FunctionFragment;
    "withdrawERC20Token(address,uint256)": FunctionFragment;
    "withdrawNativeToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "addNodeBackendAddress"
      | "callbackGasLimit"
      | "callbackWithRandomness"
      | "callingContracts"
      | "contractPurpose"
      | "fee"
      | "nonce"
      | "owner"
      | "paused"
      | "removeNodeBackendAddress"
      | "requestHandled"
      | "requestRandomness"
      | "setFee"
      | "setPurpose"
      | "transferOwnership"
      | "whitelistedNodeBackendAddresses"
      | "withdrawERC20Token"
      | "withdrawNativeToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNodeBackendAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackWithRandomness",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callingContracts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractPurpose",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeNodeBackendAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestHandled",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomness",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPurpose",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedNodeBackendAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Token",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNativeToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNodeBackendAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackWithRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNodeBackendAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestHandled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPurpose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedNodeBackendAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNativeToken",
    data: BytesLike
  ): Result;

  events: {
    "FeeSet(address,uint256)": EventFragment;
    "NodeBackendAddressAdded(address,address)": EventFragment;
    "NodeBackendAddressRemoved(address,address)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PurposeSet(address,string)": EventFragment;
    "RandomnessRequest(address,address,uint256,bytes32,uint32,uint16,uint32)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeBackendAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeBackendAddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurposeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomnessRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface FeeSetEventObject {
  sender: string;
  fee: BigNumber;
}
export type FeeSetEvent = TypedEvent<[string, BigNumber], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface NodeBackendAddressAddedEventObject {
  sender: string;
  newNodeBackend: string;
}
export type NodeBackendAddressAddedEvent = TypedEvent<
  [string, string],
  NodeBackendAddressAddedEventObject
>;

export type NodeBackendAddressAddedEventFilter =
  TypedEventFilter<NodeBackendAddressAddedEvent>;

export interface NodeBackendAddressRemovedEventObject {
  sender: string;
  newNodeBackend: string;
}
export type NodeBackendAddressRemovedEvent = TypedEvent<
  [string, string],
  NodeBackendAddressRemovedEventObject
>;

export type NodeBackendAddressRemovedEventFilter =
  TypedEventFilter<NodeBackendAddressRemovedEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PurposeSetEventObject {
  sender: string;
  purpose: string;
}
export type PurposeSetEvent = TypedEvent<
  [string, string],
  PurposeSetEventObject
>;

export type PurposeSetEventFilter = TypedEventFilter<PurposeSetEvent>;

export interface RandomnessRequestEventObject {
  user: string;
  dapp: string;
  nonce: BigNumber;
  requestId: string;
  _callbackGasLimit: number;
  _requestConfirmations: number;
  _numWords: number;
}
export type RandomnessRequestEvent = TypedEvent<
  [string, string, BigNumber, string, number, number, number],
  RandomnessRequestEventObject
>;

export type RandomnessRequestEventFilter =
  TypedEventFilter<RandomnessRequestEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ChainlinkVRFv2DirectFundingProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlinkVRFv2DirectFundingProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNodeBackendAddress(
      _nodeBackendAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callbackGasLimit(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    callbackWithRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callingContracts(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contractPurpose(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeNodeBackendAddress(
      _nodeBackendAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestHandled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestRandomness(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _numWords: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPurpose(
      _purpose: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistedNodeBackendAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawERC20Token(
      _tokenContractAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNativeToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNodeBackendAddress(
    _nodeBackendAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callbackGasLimit(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  callbackWithRandomness(
    sigV: PromiseOrValue<BigNumberish>[],
    sigR: PromiseOrValue<BytesLike>[],
    sigS: PromiseOrValue<BytesLike>[],
    requestOrigin: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    requestId: PromiseOrValue<BytesLike>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callingContracts(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  contractPurpose(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeNodeBackendAddress(
    _nodeBackendAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestHandled(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestRandomness(
    _callbackGasLimit: PromiseOrValue<BigNumberish>,
    _requestConfirmations: PromiseOrValue<BigNumberish>,
    _numWords: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPurpose(
    _purpose: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistedNodeBackendAddresses(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawERC20Token(
    _tokenContractAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNativeToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addNodeBackendAddress(
      _nodeBackendAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    callbackGasLimit(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    callbackWithRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    callingContracts(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    contractPurpose(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeNodeBackendAddress(
      _nodeBackendAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestHandled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestRandomness(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _numWords: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPurpose(
      _purpose: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedNodeBackendAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawERC20Token(
      _tokenContractAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNativeToken(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FeeSet(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<BigNumberish> | null
    ): FeeSetEventFilter;
    FeeSet(
      sender?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<BigNumberish> | null
    ): FeeSetEventFilter;

    "NodeBackendAddressAdded(address,address)"(
      sender?: PromiseOrValue<string> | null,
      newNodeBackend?: PromiseOrValue<string> | null
    ): NodeBackendAddressAddedEventFilter;
    NodeBackendAddressAdded(
      sender?: PromiseOrValue<string> | null,
      newNodeBackend?: PromiseOrValue<string> | null
    ): NodeBackendAddressAddedEventFilter;

    "NodeBackendAddressRemoved(address,address)"(
      sender?: PromiseOrValue<string> | null,
      newNodeBackend?: PromiseOrValue<string> | null
    ): NodeBackendAddressRemovedEventFilter;
    NodeBackendAddressRemoved(
      sender?: PromiseOrValue<string> | null,
      newNodeBackend?: PromiseOrValue<string> | null
    ): NodeBackendAddressRemovedEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PurposeSet(address,string)"(
      sender?: PromiseOrValue<string> | null,
      purpose?: null
    ): PurposeSetEventFilter;
    PurposeSet(
      sender?: PromiseOrValue<string> | null,
      purpose?: null
    ): PurposeSetEventFilter;

    "RandomnessRequest(address,address,uint256,bytes32,uint32,uint16,uint32)"(
      user?: PromiseOrValue<string> | null,
      dapp?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      requestId?: null,
      _callbackGasLimit?: null,
      _requestConfirmations?: null,
      _numWords?: null
    ): RandomnessRequestEventFilter;
    RandomnessRequest(
      user?: PromiseOrValue<string> | null,
      dapp?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      requestId?: null,
      _callbackGasLimit?: null,
      _requestConfirmations?: null,
      _numWords?: null
    ): RandomnessRequestEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNodeBackendAddress(
      _nodeBackendAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callbackGasLimit(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callbackWithRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callingContracts(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractPurpose(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeNodeBackendAddress(
      _nodeBackendAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestHandled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestRandomness(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _numWords: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPurpose(
      _purpose: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistedNodeBackendAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawERC20Token(
      _tokenContractAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNativeToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNodeBackendAddress(
      _nodeBackendAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callbackGasLimit(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callbackWithRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callingContracts(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractPurpose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeNodeBackendAddress(
      _nodeBackendAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestHandled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestRandomness(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestConfirmations: PromiseOrValue<BigNumberish>,
      _numWords: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPurpose(
      _purpose: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedNodeBackendAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawERC20Token(
      _tokenContractAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNativeToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
