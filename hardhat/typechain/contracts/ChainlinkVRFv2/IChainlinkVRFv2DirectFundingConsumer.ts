/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IChainlinkVRFv2DirectFundingConsumerInterface
  extends utils.Interface {
  functions: {
    "verifyAndFulfillRandomness(uint8[],bytes32[],bytes32[],address,uint256,bytes32,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "verifyAndFulfillRandomness"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyAndFulfillRandomness",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyAndFulfillRandomness",
    data: BytesLike
  ): Result;

  events: {
    "ProxyContractSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProxyContractSet"): EventFragment;
}

export interface ProxyContractSetEventObject {
  operator: string;
  proxyContractAddress: string;
}
export type ProxyContractSetEvent = TypedEvent<
  [string, string],
  ProxyContractSetEventObject
>;

export type ProxyContractSetEventFilter =
  TypedEventFilter<ProxyContractSetEvent>;

export interface IChainlinkVRFv2DirectFundingConsumer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IChainlinkVRFv2DirectFundingConsumerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    verifyAndFulfillRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  verifyAndFulfillRandomness(
    sigV: PromiseOrValue<BigNumberish>[],
    sigR: PromiseOrValue<BytesLike>[],
    sigS: PromiseOrValue<BytesLike>[],
    requestOrigin: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    requestId: PromiseOrValue<BytesLike>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    verifyAndFulfillRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProxyContractSet(address,address)"(
      operator?: PromiseOrValue<string> | null,
      proxyContractAddress?: PromiseOrValue<string> | null
    ): ProxyContractSetEventFilter;
    ProxyContractSet(
      operator?: PromiseOrValue<string> | null,
      proxyContractAddress?: PromiseOrValue<string> | null
    ): ProxyContractSetEventFilter;
  };

  estimateGas: {
    verifyAndFulfillRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    verifyAndFulfillRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
