/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ChainlinkVRFv2DirectFundingConsumerExampleInterface
  extends utils.Interface {
  functions: {
    "initiateRandomnessRequest()": FunctionFragment;
    "multiSignatureThreshold()": FunctionFragment;
    "permittedOracleAddresses(address)": FunctionFragment;
    "proxyContractAddress()": FunctionFragment;
    "requestExists(bytes32)": FunctionFragment;
    "verifyAndFulfillRandomness(uint8[],bytes32[],bytes32[],address,uint256,bytes32,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "initiateRandomnessRequest"
      | "multiSignatureThreshold"
      | "permittedOracleAddresses"
      | "proxyContractAddress"
      | "requestExists"
      | "verifyAndFulfillRandomness"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initiateRandomnessRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSignatureThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permittedOracleAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestExists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndFulfillRandomness",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "initiateRandomnessRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSignatureThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permittedOracleAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndFulfillRandomness",
    data: BytesLike
  ): Result;

  events: {
    "OraclePermissionSet(address,address,bool)": EventFragment;
    "OracleThresholdSet(address,uint256)": EventFragment;
    "ProxyContractSet(address,address)": EventFragment;
    "RandomnessProvided(bytes32,uint256[])": EventFragment;
    "SignaturesCheckPassedRandomnessReceived(bytes32,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OraclePermissionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleThresholdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyContractSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomnessProvided"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SignaturesCheckPassedRandomnessReceived"
  ): EventFragment;
}

export interface OraclePermissionSetEventObject {
  operator: string;
  oracle: string;
  permitted: boolean;
}
export type OraclePermissionSetEvent = TypedEvent<
  [string, string, boolean],
  OraclePermissionSetEventObject
>;

export type OraclePermissionSetEventFilter =
  TypedEventFilter<OraclePermissionSetEvent>;

export interface OracleThresholdSetEventObject {
  operator: string;
  newThreshold: BigNumber;
}
export type OracleThresholdSetEvent = TypedEvent<
  [string, BigNumber],
  OracleThresholdSetEventObject
>;

export type OracleThresholdSetEventFilter =
  TypedEventFilter<OracleThresholdSetEvent>;

export interface ProxyContractSetEventObject {
  operator: string;
  proxyContractAddress: string;
}
export type ProxyContractSetEvent = TypedEvent<
  [string, string],
  ProxyContractSetEventObject
>;

export type ProxyContractSetEventFilter =
  TypedEventFilter<ProxyContractSetEvent>;

export interface RandomnessProvidedEventObject {
  requestId: string;
  randomWords: BigNumber[];
}
export type RandomnessProvidedEvent = TypedEvent<
  [string, BigNumber[]],
  RandomnessProvidedEventObject
>;

export type RandomnessProvidedEventFilter =
  TypedEventFilter<RandomnessProvidedEvent>;

export interface SignaturesCheckPassedRandomnessReceivedEventObject {
  requestId: string;
  randomWords: BigNumber[];
}
export type SignaturesCheckPassedRandomnessReceivedEvent = TypedEvent<
  [string, BigNumber[]],
  SignaturesCheckPassedRandomnessReceivedEventObject
>;

export type SignaturesCheckPassedRandomnessReceivedEventFilter =
  TypedEventFilter<SignaturesCheckPassedRandomnessReceivedEvent>;

export interface ChainlinkVRFv2DirectFundingConsumerExample
  extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlinkVRFv2DirectFundingConsumerExampleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initiateRandomnessRequest(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiSignatureThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    permittedOracleAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proxyContractAddress(overrides?: CallOverrides): Promise<[string]>;

    requestExists(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyAndFulfillRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  initiateRandomnessRequest(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiSignatureThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  permittedOracleAddresses(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proxyContractAddress(overrides?: CallOverrides): Promise<string>;

  requestExists(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyAndFulfillRandomness(
    sigV: PromiseOrValue<BigNumberish>[],
    sigR: PromiseOrValue<BytesLike>[],
    sigS: PromiseOrValue<BytesLike>[],
    requestOrigin: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    requestId: PromiseOrValue<BytesLike>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initiateRandomnessRequest(overrides?: CallOverrides): Promise<void>;

    multiSignatureThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    permittedOracleAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxyContractAddress(overrides?: CallOverrides): Promise<string>;

    requestExists(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyAndFulfillRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OraclePermissionSet(address,address,bool)"(
      operator?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      permitted?: PromiseOrValue<boolean> | null
    ): OraclePermissionSetEventFilter;
    OraclePermissionSet(
      operator?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      permitted?: PromiseOrValue<boolean> | null
    ): OraclePermissionSetEventFilter;

    "OracleThresholdSet(address,uint256)"(
      operator?: PromiseOrValue<string> | null,
      newThreshold?: PromiseOrValue<BigNumberish> | null
    ): OracleThresholdSetEventFilter;
    OracleThresholdSet(
      operator?: PromiseOrValue<string> | null,
      newThreshold?: PromiseOrValue<BigNumberish> | null
    ): OracleThresholdSetEventFilter;

    "ProxyContractSet(address,address)"(
      operator?: PromiseOrValue<string> | null,
      proxyContractAddress?: PromiseOrValue<string> | null
    ): ProxyContractSetEventFilter;
    ProxyContractSet(
      operator?: PromiseOrValue<string> | null,
      proxyContractAddress?: PromiseOrValue<string> | null
    ): ProxyContractSetEventFilter;

    "RandomnessProvided(bytes32,uint256[])"(
      requestId?: PromiseOrValue<BytesLike> | null,
      randomWords?: PromiseOrValue<BigNumberish>[] | null
    ): RandomnessProvidedEventFilter;
    RandomnessProvided(
      requestId?: PromiseOrValue<BytesLike> | null,
      randomWords?: PromiseOrValue<BigNumberish>[] | null
    ): RandomnessProvidedEventFilter;

    "SignaturesCheckPassedRandomnessReceived(bytes32,uint256[])"(
      requestId?: PromiseOrValue<BytesLike> | null,
      randomWords?: PromiseOrValue<BigNumberish>[] | null
    ): SignaturesCheckPassedRandomnessReceivedEventFilter;
    SignaturesCheckPassedRandomnessReceived(
      requestId?: PromiseOrValue<BytesLike> | null,
      randomWords?: PromiseOrValue<BigNumberish>[] | null
    ): SignaturesCheckPassedRandomnessReceivedEventFilter;
  };

  estimateGas: {
    initiateRandomnessRequest(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiSignatureThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    permittedOracleAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxyContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    requestExists(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAndFulfillRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initiateRandomnessRequest(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiSignatureThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permittedOracleAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestExists(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAndFulfillRandomness(
      sigV: PromiseOrValue<BigNumberish>[],
      sigR: PromiseOrValue<BytesLike>[],
      sigS: PromiseOrValue<BytesLike>[],
      requestOrigin: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
