/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "OwnableInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableInterface__factory>;
    getContractFactory(
      name: "VRFV2WrapperInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFV2WrapperInterface__factory>;
    getContractFactory(
      name: "VRFV2WrapperConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFV2WrapperConsumerBase__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ChainlinkVRFv2DirectFundingConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkVRFv2DirectFundingConsumerBase__factory>;
    getContractFactory(
      name: "ChainlinkVRFv2DirectFundingConsumerExample",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkVRFv2DirectFundingConsumerExample__factory>;
    getContractFactory(
      name: "ChainlinkVRFv2DirectFundingProducer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkVRFv2DirectFundingProducer__factory>;
    getContractFactory(
      name: "ChainlinkVRFv2DirectFundingProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkVRFv2DirectFundingProxy__factory>;
    getContractFactory(
      name: "IChainlinkVRFv2DirectFundingConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkVRFv2DirectFundingConsumer__factory>;
    getContractFactory(
      name: "IChainlinkVRFv2DirectFundingProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkVRFv2DirectFundingProxy__factory>;

    getContractAt(
      name: "ConfirmedOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "OwnableInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableInterface>;
    getContractAt(
      name: "VRFV2WrapperInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFV2WrapperInterface>;
    getContractAt(
      name: "VRFV2WrapperConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFV2WrapperConsumerBase>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ChainlinkVRFv2DirectFundingConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkVRFv2DirectFundingConsumerBase>;
    getContractAt(
      name: "ChainlinkVRFv2DirectFundingConsumerExample",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkVRFv2DirectFundingConsumerExample>;
    getContractAt(
      name: "ChainlinkVRFv2DirectFundingProducer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkVRFv2DirectFundingProducer>;
    getContractAt(
      name: "ChainlinkVRFv2DirectFundingProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkVRFv2DirectFundingProxy>;
    getContractAt(
      name: "IChainlinkVRFv2DirectFundingConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkVRFv2DirectFundingConsumer>;
    getContractAt(
      name: "IChainlinkVRFv2DirectFundingProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkVRFv2DirectFundingProxy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
