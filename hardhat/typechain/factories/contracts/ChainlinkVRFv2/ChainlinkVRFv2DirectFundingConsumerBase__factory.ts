/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ChainlinkVRFv2DirectFundingConsumerBase,
  ChainlinkVRFv2DirectFundingConsumerBaseInterface,
} from "../../../contracts/ChainlinkVRFv2/ChainlinkVRFv2DirectFundingConsumerBase";

const _abi = [
  {
    inputs: [],
    name: "ChainlinkVRFv2DirectFundingConsumerBase_MismatchedSignaturesCount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "reason",
        type: "bytes",
      },
    ],
    name: "ChainlinkVRFv2DirectFundingConsumerBase_RandomRequestFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sigCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sigThreshold",
        type: "uint256",
      },
    ],
    name: "ChainlinkVRFv2DirectFundingConsumerBase_ToFewSignatures",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainlinkVRFv2DirectFundingConsumerBase_UnauthorizedOracleSignatures",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainlinkVRFv2DirectFundingConsumerBase_UnorderedOracles",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "IChainlinkVRFv2DirectFundingConsumer_InsufficientERC20Balance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "provided",
        type: "uint256",
      },
    ],
    name: "IChainlinkVRFv2DirectFundingConsumer_NativeFeeIncorrect",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "unauthorizedProvider",
        type: "address",
      },
    ],
    name: "IChainlinkVRFv2DirectFundingConsumer_RandomnessProviderUnauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oracle",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "permitted",
        type: "bool",
      },
    ],
    name: "OraclePermissionSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "newThreshold",
        type: "uint256",
      },
    ],
    name: "OracleThresholdSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "proxyContractAddress",
        type: "address",
      },
    ],
    name: "ProxyContractSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "SignaturesCheckPassedRandomnessReceived",
    type: "event",
  },
  {
    inputs: [],
    name: "multiSignatureThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "permittedOracleAddresses",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxyContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8[]",
        name: "sigV",
        type: "uint8[]",
      },
      {
        internalType: "bytes32[]",
        name: "sigR",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "sigS",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "requestOrigin",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "verifyAndFulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ChainlinkVRFv2DirectFundingConsumerBase__factory {
  static readonly abi = _abi;
  static createInterface(): ChainlinkVRFv2DirectFundingConsumerBaseInterface {
    return new utils.Interface(
      _abi
    ) as ChainlinkVRFv2DirectFundingConsumerBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkVRFv2DirectFundingConsumerBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ChainlinkVRFv2DirectFundingConsumerBase;
  }
}
